@page "/sell"

@attribute [Authorize]

@inject ISellProductUseCase SellProductUseCase
<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>

<h3>Sell Product</h3>

@if (sellViewModel != null)
{
    <EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="po">Sales Order Number</label>
            <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Product To Sell</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                               DisplaySearchResult="true"></ViewProductsComponent>

            <InputText id="inv" class="form-control" @bind-Value="sellViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@sellViewModel.ProductId" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="sellViewModel.ProductPrice" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="Qty">Qunatity</label>
            <InputNumber id="Qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Sell</button>



    </EditForm>
}

@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product selectedProduct;
    private string errorMessage;


    private void OnValidSubmit()
    {
        // we will need to validate to see if we have enough of products
        if (this.selectedProduct.Quantity < this.sellViewModel.QuantityToSell)
        {
            this.errorMessage = $"Sorry ! The quantity of the product is not enough {this.selectedProduct.Quantity} are available";
            return;
        }
        else
        {
            errorMessage = string.Empty;
        }

        SellProductUseCase.ExecuteAsync
        (

            this.sellViewModel.SalesOrderNumber,
            this.selectedProduct,
            this.sellViewModel.QuantityToSell,
            "Amin"
        );
        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
        this.errorMessage = string.Empty;

    }
    private void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        sellViewModel.ProductId = product.ProductId;
        sellViewModel.ProductName = product.ProductName;
        sellViewModel.ProductPrice = product.Price;

    }

}
