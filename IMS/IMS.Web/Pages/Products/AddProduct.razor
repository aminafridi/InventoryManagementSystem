@page "/addproduct"

@attribute [Authorize]

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>

@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div>
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        <div>
            <label for="Qty">Quantity</label>
            <InputNumber id="Qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div>
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent 
            @ref="ProductInventoriesComponent"
            OnInventorySelected="OnInventorySelected">
            </ProductInventoriesComponent>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
    
}

@code {
    public Product? product;
    private ProductInventoriesComponent? ProductInventoriesComponent; 

    protected override void OnInitialized()
    {
        this.product = new Product();
    }
    private async Task OnValidSubmit()
    {
        if (this.product != null)
        {
            this.ProductInventoriesComponent.ProductInventories.ForEach(x =>
              {
                  x.ProductId = this.product.ProductId;
              });
            //this.product.productInventories = this.ProductInventoriesComponent.ProductInventories;

            await AddProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }

    }
    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
   


}
