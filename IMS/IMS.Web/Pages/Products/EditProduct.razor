@page "/editproduct/{id:int}"

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase

<h3>Edit Product</h3>
@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div>
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        <div>
            <label for="Qty">Quantity</label>
            <InputNumber id="Qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div>
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent  ProductInventories="product.ProductInventories"
        OnInventorySelected="OnInventorySelected">
        </ProductInventoriesComponent>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

}   




@code {
    public Product product = new Product();

    [Parameter]
    public int Id { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }
    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
    private void OnValidSubmit()
    {
        EditProductUseCase.ExecuteAsync(this.product);
        NavigationManager.NavigateTo("/products");
    }

}
