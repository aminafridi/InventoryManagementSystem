@page "/addInventory"

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IAddInventoryUseCase AddInventoryUseCase

<h3>Add Inventory</h3>
@if (inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Inventory Name</label>
            <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Quantity">Quantity</label>
            <InputNumber id="Quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>

    </EditForm>

}


@code {
    private Inventory inventory = new Inventory();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        inventory = new Inventory();
    }
    private async Task OnValidSubmit()
    {
        if(this.inventory !=null)
        {
            await AddInventoryUseCase.ExecuteAsync(this.inventory);
            NavigationManager.NavigateTo("/inventories");

        }

    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
